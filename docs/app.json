[{"name": "app.py", "content": "# --------------------------------------------\n# Imports - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\n# From shiny, import just reactive and render\nfrom shiny import reactive, render\n\n# From shiny.express, import just ui and inputs \nfrom shiny.express import input, ui\n\n# Imports for live data simulation and processing\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\n\n# Font Awesome icons for styling\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Constants and Reactive Content\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 1\nDEQUE_SIZE: int = 10  # Store the last 10 readings\n\n# Reactive value wrapper around a deque\nreactive_value_wrapper = reactive.Value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n    \"\"\"\n    Generate fake temperature data in multiple units and a timestamp every UPDATE_INTERVAL_SECS.\n    \"\"\"\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Generate random temperature in Celsius\n    temp_celsius = round(random.uniform(-10, 35), 1)\n    temp_fahrenheit = round((temp_celsius * 9 / 5) + 32, 1)  # Convert to Fahrenheit\n    temp_kelvin = round(temp_celsius + 273.15, 1)  # Convert to Kelvin\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    new_data = {\n        \"temp_celsius\": temp_celsius,\n        \"temp_fahrenheit\": temp_fahrenheit,\n        \"temp_kelvin\": temp_kelvin,\n        \"timestamp\": timestamp,\n    }\n\n    # Update deque with new data\n    reactive_value_wrapper.get().append(new_data)\n\n    # Convert deque to DataFrame for display and processing\n    df = pd.DataFrame(reactive_value_wrapper.get())\n\n    # Return required values\n    return df, new_data\n\n\n# --------------------------------------------\n# Define UI Layout\n# --------------------------------------------\n\nui.page_opts(title=\"Moses' Custom Live Data Dashboard\", fillable=True)\n\n# Sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Real-Time Data Explorer\", class_=\"text-center\")\n    ui.p(\"A custom dashboard to simulate and display live temperature readings.\", class_=\"text-center\")\n    ui.input_radio_buttons(\n        \"temp_unit\",\n        label=\"Select Temperature Unit\",\n        choices=[\"Celsius\", \"Fahrenheit\", \"Kelvin\"],\n        selected=\"Celsius\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub Source\", href=\"https://github.com/moseskoroma/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"Deployed App\", href=\"https://moseskoroma.github.io/cintel-05-cintel/\", target=\"_blank\")\n\n# Main Panel\nwith ui.navset_card_tab(id=\"main_panel\"):\n    with ui.nav_panel(\"Live Data\"):\n        # Value Box for Current Temperature\n        with ui.value_box(\n            showcase=icon_svg(\"thermometer\"),\n            theme=\"bg-gradient-green-blue\",\n        ):\n            \"Live Temperature\"\n\n            @render.text\n            def display_temp():\n                \"\"\"Display the latest temperature in the selected unit.\"\"\"\n                df, latest_data = reactive_calc_combined()\n                selected_unit = input.temp_unit()\n\n                if selected_unit == \"Celsius\":\n                    temp = latest_data[\"temp_celsius\"]\n                    unit = \"\u00b0C\"\n                elif selected_unit == \"Fahrenheit\":\n                    temp = latest_data[\"temp_fahrenheit\"]\n                    unit = \"\u00b0F\"\n                else:\n                    temp = latest_data[\"temp_kelvin\"]\n                    unit = \"K\"\n\n                return f\"{temp} {unit}\"\n\n        # Value Box for Timestamp\n        with ui.value_box(\n            showcase=icon_svg(\"clock\"),\n            theme=\"bg-gradient-blue-purple\",\n        ):\n            \"Current Date and Time\"\n\n            @render.text\n            def display_time():\n                \"\"\"Display the current timestamp.\"\"\"\n                _, latest_data = reactive_calc_combined()\n                return latest_data[\"timestamp\"]\n\n    with ui.nav_panel(\"Recent Readings\"):\n        with ui.card():\n            ui.card_header(\"Recent Data Table\")\n\n            @render.data_frame\n            def display_data_table():\n                \"\"\"Display the recent readings as a DataFrame.\"\"\"\n                df, _ = reactive_calc_combined()\n                return df\n\n    with ui.nav_panel(\"Temperature Trends\"):\n        with ui.card():\n            ui.card_header(\"Temperature Trend Chart\")\n\n            @render_plotly\n            def display_plot():\n                \"\"\"Display a temperature trend chart with a regression line.\"\"\"\n                df, _ = reactive_calc_combined()\n\n                if not df.empty:\n                    fig = px.scatter(\n                        df,\n                        x=\"timestamp\",\n                        y=\"temp_celsius\",\n                        title=\"Temperature Trends with Regression Line\",\n                        labels={\"temp_celsius\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                        color_discrete_sequence=[\"blue\"],\n                    )\n\n                    # Add regression line\n                    x_vals = range(len(df))\n                    slope, intercept, _, _, _ = stats.linregress(x_vals, df[\"temp_celsius\"])\n                    df[\"regression_line\"] = [slope * x + intercept for x in x_vals]\n\n                    fig.add_scatter(x=df[\"timestamp\"], y=df[\"regression_line\"], mode=\"lines\", name=\"Regression Line\")\n\n                    fig.update_layout(\n                        xaxis_title=\"Time\",\n                        yaxis_title=\"Temperature (\u00b0C)\",\n                        template=\"plotly_white\",\n                    )\n                    return fig\n\n                return px.scatter(title=\"No Data Available Yet\")\n", "type": "text"}]